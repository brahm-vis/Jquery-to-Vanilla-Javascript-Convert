    /*!
 * jQuery to Vanilla JS Converter
 * Version: 1.0.0    (03/02/2025)
 * Developer: Brahman WebTech
 * Developer URL: https://bmwtech.in
 * Description: This Javascript Library converts jQuery code to Vanilla JS.
 * Repository: https://github.com/brahm-vis/Jquery-to-Vanilla-Javascript-Convert
 * License: MIT License
 * 
 * Disclaimer: jQuery is a vast and extensive library, and while we've made an effort to cover a comprehensive set of functions, there may be some functions that we missed in the conversion. We will keep updating this Javascript Library to include additional functions as we identify them. If you come across any jQuery functions that are not converted here, please let us know. Your feedback is valuable to us and helps us improve this tool for everyone. Thank you!
 */


    const BMWConvinput = document.getElementById('BMWConvinput');
    const BMWConvoutput = document.getElementById('BMWConvoutput');
    const convertButton = document.getElementById('BMWConvconvert');
    
    function BMWConvReplaceRule(code, search, replace) {
        return code.replace(search, replace);
    }
    
    function BMWConvCreateRule(search, replace) {
        return {
            search: new RegExp(`(\\$|jQuery)\\((${search})\\)${replace}`, "g"),
            replace: `document.querySelector(${replace.replace("$2", "")})`
        };
    }
    
    const jQuerySyntaxes = [
        ".addClass($1);",
        ".removeClass($1);",
        ".toggleClass($1);",
        ".css($1);",
        ".attr($1);",
        ".removeAttr($1);",
        ".val($1);",
        ".on($1, $2);",
        ".off($1, $2);",
        ".trigger($1);",
        ".hide();",
        ".show();",
        ".toggle();",
        ".html($1);",
        ".text($1);",
        ".append($1);",
        ".prepend($1);",
        ".after($1);",
        ".before($1);",
        ".remove($1);",
        ".empty();",
        ".parent();",
        ".next();",
        ".prev();",
        ".children($1);",
        ".find($1);",
        ".first();",
        ".last();",
        ".siblings($1);",
        ".filter($1);",
        ".eq($1);",
        ".firstChild();",
        ".lastChild();",
        ".is($1);",
        ".not($1);",
        ".submit();",
        ".blur();",
        ".focus();",
        ".scrollTo($1);",
        ".scrollTop($1);",
        ".scrollLeft($1);",
        ".offset();",
        ".fadeIn($1);",
        ".fadeOut($1);",
        ".slideUp($1);",
        ".slideDown($1);",
        ".clone($1);",
        ".replaceWith($1);",
        ".wrap($1);",
        ".unwrap($1);",
        ".index($1);",
        ".animate($1);",
        ".stop($1);",
        ".fadeTo($1, $2);",
        ".delay($1);",
        ".serialize();",
        ".serializeArray();",
        ".wrapAll($1);",
        ".wrapInner($1);",
        ".unwrap();",
        ".stop();",
        ".hover($1, $2);",
        ".position();",
        ".outerWidth($1);",
        ".outerHeight($1);",
        ".innerWidth($1);",
        ".innerHeight($1);",
        ".width($1);",
        ".height($1);",
        ".detach($1);",
        ".replaceAll($1);",
        ".addBack($1);",
        ".map($1);",
        ".toArray($1);",
        ".data($1, $2);",
        ".removeData($1);",
        ".fadeToggle($1);",
        ".animate($1, $2);",
        ".one($1, $2);",
        ".delegate($1, $2, $3);",
        ".undelegate($1, $2, $3);",
        ".live($1, $2);",
        ".die($1, $2);",
        ".bind($1, $2);",
        ".unbind($1, $2);",
        ".mouseenter($1);",
        ".mouseleave($1);",
        ".mousemove($1);",
        ".mousedown($1);",
        ".mouseup($1);",
        ".scroll($1);",
        ".resize($1);",
        ".focusin($1);",
        ".focusout($1);",
        ".each($1);",
        ".load($1, $2);",
        ".wrap($1);",
        ".keypress($1);",
        ".keydown($1);",
        ".keyup($1);",
        ".change($1);",
        ".dblclick($1);",
        ".contextmenu($1);",
        ".select($1);",
        ".hover($1);",
        ".ajaxStart($1);",
        ".ajaxStop($1);",
        ".ajaxComplete($1);",
        ".ajaxError($1);",
        ".ajaxSend($1);",
        ".ajaxSuccess($1);",
        ".param($1);",
        ".extend($1);",
        ".noConflict();",
        ".globalEval($1);",
        ".proxy($1, $2);",
        ".now();",
        ".inArray($1, $2);",
        ".isArray($1);",
        ".isEmptyObject($1);",
        ".isFunction($1);",
        ".isNumeric($1);",
        ".isPlainObject($1);",
        ".isWindow($1);",
        ".trim($1);",
        ".type($1);",
        ".unique($1);",
        ".parseJSON($1);",
        ".parseXML($1);",
        ".grep($1, $2);",
        ".map($1, $2);",
        ".guid($1);",
        ".proxy($1, $2);",
        ".Event($1);",
        ".removeProp($1);",
        ".push($1);",
        ".merge($1, $2);",
        ".getScript($1);",
        ".getJSON($1, $2);",
        ".get($1, $2);",
        ".post($1, $2);",
        ".queue($1, $2);",
        ".dequeue($1);",
        ".promise($1);",
        ".ready($1);",
        ".toggleClass($1, $2);",
        ".hasClass($1);",
        ".stop();",
        ".clearQueue($1);",
        ".finish($1);",
        ".slideToggle($1);",
        ".slice($1);",
        ".not($1);",
        ".eq($1);",
        ".add($1);",
        ".outerWidth($1);",
        ".outerHeight($1);",
        ".innerWidth($1);",
        ".innerHeight($1);",
        ".on($1);",
        ".innerWidth($1);",
        ".innerHeight($1);",
        ".outerWidth($1);",
        ".outerHeight($1);",
        ".triggerHandler($1);",
        ".fadeIn($1);",
        ".fadeOut($1);",
        ".scrollTo($1);",
        ".hover($1, $2);",
        ".add($1);",
        ".children($1);",
        ".contents($1);",
        ".css($1, $2);",
        ".closest($1);",
        ".attr($1, $2);",
        ".wrapAll($1);",
        ".remove($1);",
        ".toggle($1);",
        ".fadeToggle($1);",
        ".finish($1);",
        ".stop($1);",
        ".is($1);",
        ".click($1);",
        ".load($1);",
        ".error($1);",
        ".trigger($1);",
        ".slideUp($1);",
        ".slideDown($1);",
        ".clearQueue($1);",
        ".ajax($1);",
        ".parseHTML($1);",
        ".load($1);",
        ".get($1);",
        ".post($1);",
        ".ajaxPrefilter($1);",
        ".ajaxTransport($1);",
        ".ajaxComplete($1);",
        ".ajaxError($1);",
        ".ajaxSuccess($1);",
        ".ajaxSend($1);",
        ".ajaxStop($1);",
        ".ajaxStart($1);",
        ".ajaxTransport($1);",
        ".ajaxPrefilter($1);",
        ".now($1);",
        ".globalEval($1);",
        ".camelCase($1);",
        ".nodeName($1);",
        ".off($1, $2);",
        ".one($1, $2);",
        ".triggerHandler($1);",
        ".bind($1, $2);",
        ".unbind($1, $2);",
        ".delegate($1, $2);",
        ".undelegate($1, $2);",
        ".on($1, $2);",
        ".ajax($1);",
        ".get($1);",
        ".post($1);",
        ".getJSON($1);",
        ".getScript($1);",
        ".ajaxSetup($1);",
        ".find($1);",
        ".val($1);",
        ".val();",
        ".serializeArray();",
        ".focus($1);",
        ".focus();",
        ".blur($1);",
        ".blur();",
        ".click($1);",
        ".click();",
        ".text($1);",
        ".text();",
        ".html($1);",
        ".html();",
        ".append($1);",
        ".append();",
        ".prepend($1);",
        ".prepend();",
        ".before($1);",
        ".before();",
        ".after($1);",
        ".after();",
        ".remove($1);",
        ".remove();",
        ".empty($1);",
        ".empty();",
        ".detach($1);",
        ".detach();",
        ".wrap($1);",
        ".wrapInner($1);",
        ".wrapInner();",
        ".unwrap($1);",
        ".unwrap();",
        ".replaceWith($1);",
        ".replaceWith();",
        ".css($1);",
        ".css();",
        ".offset($1);",
        ".position($1);",
        ".scrollTop($1);",
        ".scrollTop();",
        ".scrollLeft($1);",
        ".scrollLeft();",
        ".height();",
        ".width();",
        ".outerHeight();",
        ".outerWidth();",
        ".innerHeight();",
        ".innerWidth();",
        ".trigger($1);",
        ".one($1);",
        ".live($1);",
        ".die($1);",
        ".hover($1);",
        ".submit($1);",
        ".load($1);",
        ".unload($1);",
        ".ready($1);",
        ".attr($1);",
        ".removeAttr($1);",
        ".prop($1);",
        ".addClass($1);",
        ".removeClass($1);",
        ".toggleClass($1);",
        ".fadeTo($1);",
        ".fadeIn($1);",
        ".fadeOut($1);",
        ".slideUp($1);",
        ".slideDown($1);",
        ".slideToggle($1);",
        ".show($1);",
        ".hide($1);",
        ".toggle($1);",
        ".animate($1);",
        ".queue($1);",
        ".dequeue($1);",
        ".promise($1);",
        ".data($1);"
];




    
    const vanillaJsSyntaxes = [
        ".classList.add($1);",
        ".classList.remove($1);",
        ".classList.toggle($1);",
        ".style.setProperty($1);",
        ".getAttribute($1);",
        ".removeAttribute($1);",
        ".value = $1;",
        ".addEventListener($1, $2);",
        ".removeEventListener($1, $2);",
        ".dispatchEvent(new Event($1));",
        ".style.display = 'none';",
        ".style.display = 'block';",
        ".classList.toggle('hidden');",
        ".innerHTML = $1;",
        ".textContent = $1;",
        ".appendChild($1);",
        ".insertAdjacentHTML('afterbegin', $1);",
        ".insertAdjacentHTML('afterend', $1);",
        ".insertAdjacentHTML('beforebegin', $1);",
        ".parentNode.removeChild($1);",
        ".innerHTML = '';",
        ".parentNode;",
        ".nextElementSibling;",
        ".previousElementSibling;",
        ".children;$1",
        ".querySelector($1);",
        ".firstElementChild;",
        ".lastElementChild;",
        "Array.from($1.parentNode.children).filter(c => c !== $1);",
        "Array.from(document.querySelectorAll($1)).filter($2);",
        "Array.from(document.querySelectorAll($1))[$2];",
        ".firstChild;",
        ".lastChild;",
        "($1.matches($2));",
        "Array.from(document.querySelectorAll($1)).filter(e => !e.matches($2));",
        ".submit();",
        ".blur();",
        ".focus();",
        ".scrollTo($1);",
        ".scrollTop = $1;",
        ".scrollLeft = $1;",
        "{ top: $1.offsetTop, left: $1.offsetLeft };",
        ".style.transition = 'opacity 0.5s'; .style.opacity = 1;",
        ".style.transition = 'opacity 0.5s'; .style.opacity = 0;",
        ".style.transition = 'height 0.5s'; .style.height = 0;",
        ".style.transition = 'height 0.5s'; .style.height = 'auto';",
        ".cloneNode($1);",
        ".replaceWith($1);",
        "var wrapper = document.createElement($1); $1.parentNode.insertBefore(wrapper, $1); wrapper.appendChild($1);",
        "while ($1.firstChild) { $1.parentNode.insertBefore($1.firstChild, $1); } $1.parentNode.removeChild($1);",
        "Array.prototype.indexOf.call($1.parentNode.children, $1);",
        "Object.assign($1.style, $2);",
        "$1.style.transition = '';",
        ".style.transition = 'opacity ' + $1 + 's'; .style.opacity = $2;",
        "setTimeout(function() {}, $1);",
        "new URLSearchParams(new FormData($1)).toString();",
        "Array.from(new FormData($1), ([name, value]) => ({ name, value }));",
        "var wrapper = document.createElement($1); $1[0].parentNode.insertBefore(wrapper, $1[0]); $1.forEach(el => wrapper.appendChild(el));",
        "$1.forEach(el => { var wrapper = document.createElement($1); while (el.firstChild) wrapper.appendChild(el.firstChild); el.appendChild(wrapper); });",
        "$1.forEach(el => { while (el.firstChild) el.parentNode.insertBefore(el.firstChild, el); el.parentNode.removeChild(el); });",
        "clearInterval($1);",
        "$1.addEventListener('mouseenter', $2); $1.addEventListener('mouseleave', $3);",
        "{ top: $1.offsetTop, left: $1.offsetLeft };",
        "$1.offsetWidth + 'px';",
        "$1.offsetHeight + 'px';",
        "$1.clientWidth + 'px';",
        "$1.clientHeight + 'px';",
        "$1.style.width = $2 + 'px';",
        "$1.style.height = $2 + 'px';",
        "$1.parentNode.removeChild($1);",
        "$1.replaceWith(...document.querySelectorAll($2));",
        "Array.from($1).concat(Array.from(document.querySelectorAll($2)));",
        "Array.from($1).map($2);",
        "Array.from($1);",
        "$1.dataset[$2] = $3;",
        "delete $1.dataset[$2];",
        "($1.style.opacity == 0) ? $1.style.opacity = 1 : $1.style.opacity = 0;",
        "Object.assign($1.style, $2); setTimeout(function() { Object.assign($1.style, $3); }, $4);",
        "function handler() { $2(); $1.removeEventListener($1, handler); } $1.addEventListener($1, handler);",
        "$1.addEventListener($1, function(event) { if (event.target.matches($1)) $1.call(event.target, event); });",
        "$1.removeEventListener($1, function(event) { if (event.target.matches($1)) $1.call(event.target, event); });",
        "document.addEventListener($1, function(event) { if (event.target.matches('$2')) $3.call(event.target, event); });",
        "document.removeEventListener($1, function(event) { if (event.target.matches('$2')) $3.call(event.target, event); });",
        "$1.addEventListener($2, $3);",
        "$1.removeEventListener($2, $3);",
        "$1.addEventListener('mouseenter', $2);",
        "$1.addEventListener('mouseleave', $2);",
        "$1.addEventListener('mousemove', $2);",
        "$1.addEventListener('mousedown', $2);",
        "$1.addEventListener('mouseup', $2);",
        "$1.addEventListener('scroll', $2);",
        "window.addEventListener('resize', $2);",
        "$1.addEventListener('focusin', $2);",
        "$1.addEventListener('focusout', $2);",
        "$1.forEach($2);",
        "fetch($2).then(response => response.text()).then(data => $1.innerHTML = data);",
        "const wrapper = document.createElement($2); $1.parentNode.insertBefore(wrapper, $1); wrapper.appendChild($1);",
        "$1.addEventListener('keypress', $2);",
        "$1.addEventListener('keydown', $2);",
        "$1.addEventListener('keyup', $2);",
        "$1.addEventListener('change', $2);",
        "$1.addEventListener('dblclick', $2);",
        "$1.addEventListener('contextmenu', $2);",
        "$1.addEventListener('select', $2);",
        "$1.addEventListener('mouseover', $2); $1.addEventListener('mouseout', $3);",
        "$(document).ajaxStart($2);",
        "$(document).ajaxStop($2);",
        "$(document).ajaxComplete($2);",
        "$(document).ajaxError($2);",
        "$(document).ajaxSend($2);",
        "$(document).ajaxSuccess($2);",
        "new URLSearchParams($2).toString();",
        "Object.assign($1, $2);",
        "$.noConflict();",
        "eval($2);",
        "$1.bind($2, $3);",
        "Date.now();",
        "$2.indexOf($1);",
        "Array.isArray($1);",
        "Object.keys($1).length === 0;",
        "typeof $1 === 'function';",
        "!isNaN(parseFloat($1)) && isFinite($1);",
        "Object.prototype.toString.call($1) === '[object Object]';",
        "$1 != null && $1 === $1.window;",
        "$1.trim();",
        "typeof $1;",
        "Array.from(new Set($1));",
        "JSON.parse($1);",
        "new DOMParser().parseFromString($1, 'text/xml');",
        "$1.filter($2);",
        "$1.map($2);",
        "$1.guid;",
        "Function.prototype.bind.call($2, $1);",
        "new Event($1);",
        "delete $1[$2];",
        "$1.push($2);",
        "$1.concat($2);",
        "fetch($1).then(response => response.text()).then(data => eval(data));",
        "fetch($1).then(response => response.json()).then(data => $2(data));",
        "fetch($1).then(response => response.text()).then(data => $2(data));",
        "fetch($1, { method: 'POST', body: $2 }).then(response => response.text()).then(data => $2(data));",
        "$1.queue($2);",
        "$1.dequeue($2);",
        "$1.promise($2);",
        "document.addEventListener('DOMContentLoaded', $1);",
        "$1.classList.toggle($2, $3);",
        "$1.classList.contains($2);",
        "window.clearInterval($1);",
        "$1.clearQueue($2);",
        "$1.finish($2);",
        "($1.style.display === 'none') ? $1.style.display = 'block' : $1.style.display = 'none';",
        "$1.slice($2);",
        "Array.from($1).filter(el => !el.matches($2));",
        "$1[$2];",
        "Array.from($1).concat(Array.from(document.querySelectorAll($2)));",
        "$1.offsetWidth;",
        "$1.offsetHeight;",
        "$1.clientWidth;",
        "$1.clientHeight;",
        "$1.addEventListener($2, $3);",
        "$2.clientWidth = $3 + 'px';",
        "$2.clientHeight = $3 + 'px';",
        "$2.offsetWidth = $3 + 'px';",
        "$2.offsetHeight = $3 + 'px';",
        "$2[$3]();",
        "$2.style.opacity = 1; $2.style.transition = 'opacity ' + $3 + 's';",
        "$2.style.opacity = 0; $2.style.transition = 'opacity ' + $3 + 's';",
        "window.scrollTo($3);",
        "$2.addEventListener('mouseover', $3); $2.addEventListener('mouseout', $4);",
        "Array.prototype.push.apply($2, $3);",
        "$2.children;",
        "$2.childNodes;",
        "$2.style[$3] = $4;",
        "$2.closest($3);",
        "$2.setAttribute($3, $4);",
        "const wrapper = document.createElement($3); $2.parentNode.insertBefore(wrapper, $2); wrapper.appendChild($2);",
        "$2.parentNode.removeChild($2);",
        "$2.style.display = ($2.style.display === 'none') ? 'block' : 'none';",
        "$2.style.opacity = ($2.style.opacity == 0) ? 1 : 0;",
        "$2.style.transition = 'none';",
        "clearTimeout($2[$3]);",
        "$2.matches($3);",
        "$2.addEventListener('click', $3);",
        "window.addEventListener('load', $3);",
        "$2.addEventListener('error', $3);",
        "const event = new Event($3); $2.dispatchEvent(event);",
        "$2.style.height = 0; $2.style.transition = 'height ' + $3 + 's';",
        "$2.style.height = 'auto'; $2.style.transition = 'height ' + $3 + 's';",
        "queue.length = 0;",
        "fetch($2.url, { method: $2.type, headers: $2.headers, body: JSON.stringify($2.data) }).then(response => response.json()).then(data => $2.success(data)).catch(error => $2.error(error));",
        "new DOMParser().parseFromString($2, 'text/html');",
        "fetch($2).then(response => response.text()).then(data => { $3.innerHTML = data; });",
        "fetch($2).then(response => response.text()).then(data => { $3(data); });",
        "fetch($2, { method: 'POST', body: $3 }).then(response => response.text()).then(data => { $4(data); });",
        "fetch.prefilters = fetch.prefilters || []; fetch.prefilters.push($2);",
        "fetch.transports = fetch.transports || []; fetch.transports.push($2);",
        "fetch.complete = fetch.complete || []; fetch.complete.push($2);",
        "fetch.error = fetch.error || []; fetch.error.push($2);",
        "fetch.success = fetch.success || []; fetch.success.push($2);",
        "fetch.send = fetch.send || []; fetch.send.push($2);",
        "fetch.stop = fetch.stop || []; fetch.stop.push($2);",
        "fetch.start = fetch.start || []; fetch.start.push($2);",
        "fetch.transport = fetch.transport || []; fetch.transport.push($2);",
        "fetch.prefilter = fetch.prefilter || []; fetch.prefilter.push($2);",
        "Date.now();",
        "eval($2);",
        "$2.replace(/-([a-z])/g, function(g) { return g[1].toUpperCase(); });",
        "$2.nodeName.toLowerCase();",
        "$2.removeEventListener($3, $4);",
        "function handler() { $4(); $2.removeEventListener($3, handler); } $2.addEventListener($3, handler);",
        "$2.dispatchEvent(new Event($3));",
        "$2.addEventListener($3, $4);",
        "$2.removeEventListener($3, $4);",
        "$2.addEventListener($3, function(event) { if (event.target.matches($4)) $5.call(event.target, event); });",
        "$2.removeEventListener($3, function(event) { if (event.target.matches($4)) $5.call(event.target, event); });",
        "$2.addEventListener($3, function(event) { if (event.target.matches($4)) $5.call(event.target, event); });",
        "fetch($2.url, { method: $2.type, body: $2.data, headers: { 'Content-Type': 'application/x-www-form-urlencoded' }}).then(response => response.text()).then(data => $2.success(data)).catch(error => $2.error(error));",
        "fetch($2.url).then(response => response.text()).then(data => $2.success(data));",
        "fetch($2.url, { method: 'POST', body: $2.data, headers: { 'Content-Type': 'application/x-www-form-urlencoded' }}).then(response => response.text()).then(data => $2.success(data));",
        "fetch($2.url).then(response => response.json()).then(data => $2.success(data));",
        "fetch($2.url).then(response => response.text()).then(data => eval(data));",
        "fetch.defaults = Object.assign(fetch.defaults {}, $2);",
        "$2.querySelectorAll($3);",
        "$2.value = $3;",
        "$2.value;",
        "Array.from(new FormData($2)).map(([name, value]) => ({ name, value }));",
        "$2.focus($3);",
        "$2.focus();",
        "$2.blur($3);",
        "$2.blur();",
        "$2.click($3);",
        "$2.click();",
        "$2.textContent = $3;",
        "$2.textContent;",
        "$2.innerHTML = $3;",
        "$2.innerHTML;",
        "$2.append($3);",
        "$2.append();",
        "$2.prepend($3);",
        "$2.prepend();",
        "$2.insertAdjacentHTML('beforebegin', $3);",
        "$2.insertAdjacentHTML('beforebegin', '');",
        "$2.insertAdjacentHTML('afterend', $3);",
        "$2.insertAdjacentHTML('afterend', '');",
        "$2.remove($3);",
        "$2.remove();",
        "$2.innerHTML = '';",
        "$2.innerHTML = '';",
        "$2.remove($3);",
        "$2.remove();",
        "const wrapper = document.createElement(''); $2.parentNode.insertBefore(wrapper, $2); wrapper.appendChild($2);",
        "const wrapper = document.createElement($3); while ($2.firstChild) wrapper.appendChild($2.firstChild); $2.appendChild(wrapper);",
        "const wrapper = document.createElement(''); while ($2.firstChild) wrapper.appendChild($2.firstChild); $2.appendChild(wrapper);",
        "while ($2.firstChild) $2.parentNode.insertBefore($2.firstChild, $2); $2.parentNode.removeChild($2);",
        "while ($2.firstChild) $2.parentNode.insertBefore($2.firstChild, $2); $2.parentNode.removeChild($2);",
        "$2.replaceWith($3);",
        "$2.replaceWith('');",
        "$2.style.cssText = $3;",
        "$2.style.cssText;",
        "{ top: $2.offsetTop, left: $2.offsetLeft };",
        "{ top: $2.offsetTop, left: $2.offsetLeft };",
        "$2.scrollTop = $3;",
        "$2.scrollTop;",
        "$2.scrollLeft = $3;",
        "$2.scrollLeft;",
        "$2.clientHeight + 'px';",
        "$2.clientWidth + 'px';",
        "$2.offsetHeight + 'px';",
        "$2.offsetWidth + 'px';",
        "$2.clientHeight + 'px';",
        "$2.clientWidth + 'px';",
        "let event = new Event($3); $2.dispatchEvent(event);",
        "function handler() { $4.call(this, event); $2.removeEventListener($3, handler); } $2.addEventListener($3, handler);",
        "document.addEventListener($3, function(event) { if (event.target.matches('$2')) $4.call(event.target, event); });",
        "document.removeEventListener($3, function(event) { if (event.target.matches('$2')) $4.call(event.target, event); });",
        "$2.addEventListener('mouseenter', $3); $2.addEventListener('mouseleave', $4);",
        "$2.addEventListener('submit', $3);",
        "fetch($2).then(response => response.text()).then(data => $3.innerHTML = data);",
        "window.addEventListener('unload', $3);",
        "document.addEventListener('DOMContentLoaded', $3);",
        "$2.setAttribute($3, $4);",
        "$2.removeAttribute($3);",
        "$2[$3] = $4;",
        "$2.classList.add($3);",
        "$2.classList.remove($3);",
        "$2.classList.toggle($3);",
        "$2.style.transition = 'opacity ' + $3 + 's'; $2.style.opacity = $4;",
        "$2.style.transition = 'opacity ' + $3 + 's'; $2.style.opacity = 1;",
        "$2.style.transition = 'opacity ' + $3 + 's'; $2.style.opacity = 0;",
        "$2.style.transition = 'height ' + $3 + 's'; $2.style.height = 0;",
        "$2.style.transition = 'height ' + $3 + 's'; $2.style.height = 'auto';",
        "$2.style.height = ($2.style.height == 0) ? 'auto' : 0;",
        "$2.style.display = 'block';",
        "$2.style.display = 'none';",
        "$2.style.display = ($2.style.display == 'none') ? 'block' : 'none';",
        "Object.assign($2.style, $3); setTimeout(function() { Object.assign($2.style, $4); }, $5);",
        "const queue = []; queue.push($3);",
        "queue.shift();",
        "Promise.resolve($3);",
        "$2.dataset[$3];"
    ];
    
    const BMWConvConversionRules = [
        { search: /\$\(document\)\.ready\(function\(\)\s*\{([\s\S]*?)\}\);/g, replace: 'document.addEventListener("DOMContentLoaded", function() {$1});' },
        { search: /\$|jQuery/g, replace: "document.querySelector" }
    ];
    
    jQuerySyntaxes.forEach((jQuerySyntax, index) => {
        BMWConvConversionRules.push(`BMWConvCreateRule(".*?", \\${jQuerySyntax}, vanillaJsSyntaxes[index])`);
    });
    
    convertButton.addEventListener('click', () => {
        let code = BMWConvinput.value;
    
        BMWConvConversionRules.forEach(rule => {
            code = BMWConvReplaceRule(code, rule.search, rule.replace);
        });
    
        BMWConvoutput.value = code;
    });
